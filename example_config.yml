---
# Which strategy to simulate.
# Available options: ["SSO", "SSO-sync", "SSO-hash", "SSO-mul", "SD"]
strategy: "SSO"

# Verbosily of logging. Larger is more verbose.
log_verbosity: 2

# Whehter to print stats to screen during simulation.
print_stats: True

# How may cloud workers do we have in total.
num_cloud_workers: 10

# How long do we run the simulation.
# 3 hours.
time_to_run: 10800

# Latency between client and frontend server.
# Typical audio length: 5s
# Typical sample rate: 16kHz
# Typical sample size: 16 bits
# Thus typical audio total bits: 5 * 16000 * 16 = 1280000
# Typical 4G bandwidth: 5Mbps
# Thus latency: 1280000 / 5M = 0.244 (s)
client_frontend_latency: 0.244

# Latency between frontend server and cloud worker.
# Typical cloud bandwidth: 1Gbps
# Thus latency: 1280000 / 1G = 0.0012 (s)
frontend_worker_latency: 0.0012

# Latency for database IO.
# Assume profile size is 256-dim vector of floating point numbers.
# Typical read latency: 0.5 ms
# Typical write latency: 10 ms
database_read_latency: 0.0005
database_write_latency: 0.01

# Latency to run speech inference engine.
# Typical RTF of non-streaming speech inference: 0.1
# Typical audio length: 5s
# Thus here we use 0.1 * 5 = 0.5
worker_inference_latency: 0.5

# Flops cost to run one inference.
# In Turn-to-Diarize (https://arxiv.org/abs/2109.11641), example
# speaker recogntion model uses 0.42 Gflops to process 1s of audio.
# Typical audio length: 5s
# Thus here we use: 0.42 * 1000000000 * 5 = 2100000000
flops_per_inference: 2100000000

# How often do we send requests.
# Here we use 10 s.
client_request_interval: 10

# Number of users that send requests.
num_users: 1

# The distribution of requests from different users.
# This can be "uniform", "linear", or "exponential".
user_distribution: "exponential"

# Mean time of a model version update for each worker.
# Actual time follows an exponential distribution.
# Here we use 1 hour.
worker_update_mean_time: 3600

# How often does frontend send version queries to workers.
# Only used by VersionSyncFrontend and VersionSyncWorker.
# Here we use 10 min.
version_query_interval: 600
